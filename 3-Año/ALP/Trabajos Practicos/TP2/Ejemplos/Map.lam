def mapN' =
    Y (\m f xs i n . 
      (isnil xs)
        nil
        ((is0 i)
          (cons (head xs) (m f (tail xs) (suc n) (suc n)))
          (m f (cons (f (head xs)) (tail xs)) (pred i) n)))

def mapN =
    (\f xs . mapN' f xs 0 0)

-- Idea en Haskell

-- mapN :: (a -> a) -> [a] -> [a]
-- mapN f xs = mapN' f xs 0 0
--     where
--       mapN' f [] _ _ = []
--       mapN' f (x:xs) 0 n = x : (mapN' f xs (n+1) (n+1))
--       mapN' f (x:xs) i n = mapN' f ((f x) : xs) (i - 1) n
