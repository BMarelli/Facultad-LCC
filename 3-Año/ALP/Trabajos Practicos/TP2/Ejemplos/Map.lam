def mapN' =
    Y (\m f xs i n . 
      (isnil xs)
        nil
        ((is0 i)
          (cons (head xs) (m f (tail xs) (suc n) (suc n)))
          (m f (cons (f (head xs)) (tail xs)) (pred i) n)))

def mapN =
    (\f xs . mapN' f xs 0 0)

-- Idea en Haskell
-- data Array a = Nil | Cons a (Array a) deriving Show

-- mapN :: (a -> a) -> Array a -> Array a
-- mapN f xs = mapN' f xs 0 0
--     where
--       mapN' f Nil _ _ = Nil
--       mapN' f (Cons x xs) 0 n = Cons x (mapN' f xs (n+1) (n+1))
--       mapN' f (Cons x xs) i n = mapN' f (Cons (f x) xs) (i - 1) n
